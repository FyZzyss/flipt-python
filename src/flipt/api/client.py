# This file was auto-generated by Fern from our API Definition.

import typing

from backports.cached_property import cached_property

from ..environment import FliptApiEnvironment
from .resources.auth.client import AuthClient
from .resources.auth_method_k_8_s.client import AuthMethodK8SClient
from .resources.auth_method_oidc.client import AuthMethodOidcClient
from .resources.auth_method_token.client import AuthMethodTokenClient
from .resources.constraints.client import ConstraintsClient
from .resources.distributions.client import DistributionsClient
from .resources.evaluate.client import EvaluateClient
from .resources.flags.client import FlagsClient
from .resources.rules.client import RulesClient
from .resources.segments.client import SegmentsClient
from .resources.variants.client import VariantsClient


class FliptApi:
    def __init__(self, *, environment: FliptApiEnvironment, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    @cached_property
    def auth_method_k_8_s(self) -> AuthMethodK8SClient:
        return AuthMethodK8SClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_oidc(self) -> AuthMethodOidcClient:
        return AuthMethodOidcClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_token(self) -> AuthMethodTokenClient:
        return AuthMethodTokenClient(environment=self._environment, token=self._token)

    @cached_property
    def auth(self) -> AuthClient:
        return AuthClient(environment=self._environment, token=self._token)

    @cached_property
    def constraints(self) -> ConstraintsClient:
        return ConstraintsClient(environment=self._environment, token=self._token)

    @cached_property
    def distributions(self) -> DistributionsClient:
        return DistributionsClient(environment=self._environment, token=self._token)

    @cached_property
    def evaluate(self) -> EvaluateClient:
        return EvaluateClient(environment=self._environment, token=self._token)

    @cached_property
    def flags(self) -> FlagsClient:
        return FlagsClient(environment=self._environment, token=self._token)

    @cached_property
    def rules(self) -> RulesClient:
        return RulesClient(environment=self._environment, token=self._token)

    @cached_property
    def segments(self) -> SegmentsClient:
        return SegmentsClient(environment=self._environment, token=self._token)

    @cached_property
    def variants(self) -> VariantsClient:
        return VariantsClient(environment=self._environment, token=self._token)
