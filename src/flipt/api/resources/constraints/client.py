# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ....environment import FliptApiEnvironment
from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from .types.constraint import constraint
from .types.constraint_comparison_type import constraintComparisonType


class ConstraintsClient:
    def __init__(self, *, environment: FliptApiEnvironment, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    def create(
        self,
        segment_key: str,
        *,
        type: constraintComparisonType,
        property: str,
        operator: str,
        value: typing.Optional[str] = None,
    ) -> constraint:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v1/segments/{segment_key}/constraints"),
            json=jsonable_encoder({"type": type, "property": property, "operator": operator, "value": value}),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(constraint, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, segment_key: str, id: str) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v1/segments/{segment_key}/constraints/{id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        segment_key: str,
        id: str,
        *,
        type: constraintComparisonType,
        property: str,
        operator: str,
        value: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v1/segments/{segment_key}/constraints/{id}"),
            json=jsonable_encoder({"type": type, "property": property, "operator": operator, "value": value}),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
